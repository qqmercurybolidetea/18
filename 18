def func1(arg1, arg2):
    def func2(arg3, arg4):
        result = 96 | arg3 & 1857531734 | arg3
        return result
    var5 = func2(arg2, arg1)
    var40 = func3(var5, arg1)
    var41 = -2053568073 & 1366759761
    var42 = arg2 | var5 + var5 + var40
    var43 = arg2 ^ (var40 + arg1) ^ 389
    var44 = ((var43 | var40) ^ var41) ^ var43
    if var40 < var43:
        var45 = var43 | arg1 & var42 | var40
    else:
        var45 = -1774586870 & 1215705982
    var46 = -1697199017 & var43 - arg2 - 2027583451
    if arg2 < arg1:
        var47 = -979 & var5 - var40
    else:
        var47 = var43 + -768497796
    var48 = (arg1 & arg1 ^ var44) & var43
    var49 = var43 + var41 + var46
    var50 = var44 | -326 ^ (var42 + var49)
    var51 = arg2 - var49 & var46 | 503253850
    var52 = var51 | (arg2 ^ -556 ^ var51)
    var53 = (var43 ^ var43) | var49
    var54 = var51 + var51
    var55 = (var43 | var46) ^ var40
    var56 = var49 ^ var50 & var46 - var54
    result = var40 ^ var51
    return result
def func5(arg8, arg9):
    var20 = var12(arg8, arg9)
    var21 = func11()
    if var20 < arg9:
        var26 = class12()
    else:
        var26 = class14()
    for var27 in xrange(43):
        var26.func13(var21, arg8)
    var28 = (arg9 & arg8) & var20 & arg9
    var29 = (arg9 & (532880764 + 1742469840)) + var28
    var30 = 2077379284 - var28 & var21
    var31 = var30 + arg9 & var30 + 106
    var32 = (var29 & 1428580048 - var31) | var20
    var33 = ((var29 ^ var31) + var21) + -914
    if var32 < var28:
        var34 = var30 + var28
    else:
        var34 = (var21 + 43 & var28) + var33
    var35 = var31 & var21 ^ -1849676847 & -772660159
    var36 = arg8 & var28
    var37 = (arg8 | var28) - var29
    var38 = var37 + 444 & var30 ^ 1482739836
    result = var30 + (-905 + var32 & arg9) | (arg9 & (((var36 | var31) - (var35 + var30) - 2137653374) & arg9)) ^ -692344362
    return result
class class14(object):
    def func13(self, arg24, arg25):
        result = arg24 | arg25
        return result
class class12(class14):
    def func13(self, arg22, arg23):
        return 0
def func11():
    func9()
    result = len(xrange(36))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 5
def func8(arg13, arg14):
    var15 = -733 - arg13 - arg14 ^ arg14 - 43583763
    var16 = arg14 - var15 ^ (-857 + (arg14 | arg14 + (arg13 | arg13)) | arg13 + (1844057595 ^ -710897396 - arg13 ^ (arg14 ^ arg14 ^ (646 | var15) - (484732774 | var15) ^ 587 ^ arg13)) - 652) - arg13 ^ arg13
    var17 = arg14 & arg14
    var18 = var16 + 12 | (var17 + ((-412977070 | var17 | var17) & arg13))
    var19 = (((-1816203677 | var18) | ((410 | (-986465446 ^ arg13 - (736 + arg13) & (var16 + arg14 & (((582 - (var17 & (var17 - arg14))) ^ arg13) | var17) | arg13 + var16) - var18) + var18) ^ var15)) | -401) & var18
    result = var17 - arg14 & ((var16 & 560) + 963 + var17 + ((var15 & var18) ^ var18)) & arg14
    return result
def func7():
    closure = [8]
    def func6(arg10, arg11):
        closure[0] += func8(arg10, arg11)
        return closure[0]
    func = func6
    return func
var12 = func7()
def func3(arg6, arg7):
    def func4(acc, rest):
        var39 = func5(acc, -3)
        if acc == 0:
            return var39
        else:
            result = func4(acc - 1, var39)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        result = 96 | arg3 & 1857531734 | arg3
        return result
    var5 = func2(arg2, arg1)
    var40 = func3(var5, arg1)
    var41 = -2053568073 & 1366759761
    var42 = arg2 | var5 + var5 + var40
    var43 = arg2 ^ (var40 + arg1) ^ 389
    var44 = ((var43 | var40) ^ var41) ^ var43
    if var40 < var43:
        var45 = var43 | arg1 & var42 | var40
    else:
        var45 = -1774586870 & 1215705982
    var46 = -1697199017 & var43 - arg2 - 2027583451
    if arg2 < arg1:
        var47 = -979 & var5 - var40
    else:
        var47 = var43 + -768497796
    var48 = (arg1 & arg1 ^ var44) & var43
    var49 = var43 + var41 + var46
    var50 = var44 | -326 ^ (var42 + var49)
    var51 = arg2 - var49 & var46 | 503253850
    var52 = var51 | (arg2 ^ -556 ^ var51)
    var53 = (var43 ^ var43) | var49
    var54 = var51 + var51
    var55 = (var43 | var46) ^ var40
    var56 = var49 ^ var50 & var46 - var54
    result = var40 ^ var51
    return result
def func5(arg8, arg9):
    var20 = var12(arg8, arg9)
    var21 = func11()
    if var20 < arg9:
        var26 = class12()
    else:
        var26 = class14()
    for var27 in xrange(43):
        var26.func13(var21, arg8)
    var28 = (arg9 & arg8) & var20 & arg9
    var29 = (arg9 & (532880764 + 1742469840)) + var28
    var30 = 2077379284 - var28 & var21
    var31 = var30 + arg9 & var30 + 106
    var32 = (var29 & 1428580048 - var31) | var20
    var33 = ((var29 ^ var31) + var21) + -914
    if var32 < var28:
        var34 = var30 + var28
    else:
        var34 = (var21 + 43 & var28) + var33
    var35 = var31 & var21 ^ -1849676847 & -772660159
    var36 = arg8 & var28
    var37 = (arg8 | var28) - var29
    var38 = var37 + 444 & var30 ^ 1482739836
    result = var30 + (-905 + var32 & arg9) | (arg9 & (((var36 | var31) - (var35 + var30) - 2137653374) & arg9)) ^ -692344362
    return result
class class14(object):
    def func13(self, arg24, arg25):
        result = arg24 | arg25
        return result
class class12(class14):
    def func13(self, arg22, arg23):
        return 0
def func11():
    func9()
    result = len(xrange(36))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 5
def func8(arg13, arg14):
    var15 = -733 - arg13 - arg14 ^ arg14 - 43583763
    var16 = arg14 - var15 ^ (-857 + (arg14 | arg14 + (arg13 | arg13)) | arg13 + (1844057595 ^ -710897396 - arg13 ^ (arg14 ^ arg14 ^ (646 | var15) - (484732774 | var15) ^ 587 ^ arg13)) - 652) - arg13 ^ arg13
    var17 = arg14 & arg14
    var18 = var16 + 12 | (var17 + ((-412977070 | var17 | var17) & arg13))
    var19 = (((-1816203677 | var18) | ((410 | (-986465446 ^ arg13 - (736 + arg13) & (var16 + arg14 & (((582 - (var17 & (var17 - arg14))) ^ arg13) | var17) | arg13 + var16) - var18) + var18) ^ var15)) | -401) & var18
    result = var17 - arg14 & ((var16 & 560) + 963 + var17 + ((var15 & var18) ^ var18)) & arg14
    return result
def func7():
    closure = [8]
    def func6(arg10, arg11):
        closure[0] += func8(arg10, arg11)
        return closure[0]
    func = func6
    return func
var12 = func7()
def func3(arg6, arg7):
    def func4(acc, rest):
        var39 = func5(acc, -3)
        if acc == 0:
            return var39
        else:
            result = func4(acc - 1, var39)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        result = 96 | arg3 & 1857531734 | arg3
        return result
    var5 = func2(arg2, arg1)
    var40 = func3(var5, arg1)
    var41 = -2053568073 & 1366759761
    var42 = arg2 | var5 + var5 + var40
    var43 = arg2 ^ (var40 + arg1) ^ 389
    var44 = ((var43 | var40) ^ var41) ^ var43
    if var40 < var43:
        var45 = var43 | arg1 & var42 | var40
    else:
        var45 = -1774586870 & 1215705982
    var46 = -1697199017 & var43 - arg2 - 2027583451
    if arg2 < arg1:
        var47 = -979 & var5 - var40
    else:
        var47 = var43 + -768497796
    var48 = (arg1 & arg1 ^ var44) & var43
    var49 = var43 + var41 + var46
    var50 = var44 | -326 ^ (var42 + var49)
    var51 = arg2 - var49 & var46 | 503253850
    var52 = var51 | (arg2 ^ -556 ^ var51)
    var53 = (var43 ^ var43) | var49
    var54 = var51 + var51
    var55 = (var43 | var46) ^ var40
    var56 = var49 ^ var50 & var46 - var54
    result = var40 ^ var51
    return result
def func5(arg8, arg9):
    var20 = var12(arg8, arg9)
    var21 = func11()
    if var20 < arg9:
        var26 = class12()
    else:
        var26 = class14()
    for var27 in xrange(43):
        var26.func13(var21, arg8)
    var28 = (arg9 & arg8) & var20 & arg9
    var29 = (arg9 & (532880764 + 1742469840)) + var28
    var30 = 2077379284 - var28 & var21
    var31 = var30 + arg9 & var30 + 106
    var32 = (var29 & 1428580048 - var31) | var20
    var33 = ((var29 ^ var31) + var21) + -914
    if var32 < var28:
        var34 = var30 + var28
    else:
        var34 = (var21 + 43 & var28) + var33
    var35 = var31 & var21 ^ -1849676847 & -772660159
    var36 = arg8 & var28
    var37 = (arg8 | var28) - var29
    var38 = var37 + 444 & var30 ^ 1482739836
    result = var30 + (-905 + var32 & arg9) | (arg9 & (((var36 | var31) - (var35 + var30) - 2137653374) & arg9)) ^ -692344362
    return result
class class14(object):
    def func13(self, arg24, arg25):
        result = arg24 | arg25
        return result
class class12(class14):
    def func13(self, arg22, arg23):
        return 0
def func11():
    func9()
    result = len(xrange(36))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 5
def func8(arg13, arg14):
    var15 = -733 - arg13 - arg14 ^ arg14 - 43583763
    var16 = arg14 - var15 ^ (-857 + (arg14 | arg14 + (arg13 | arg13)) | arg13 + (1844057595 ^ -710897396 - arg13 ^ (arg14 ^ arg14 ^ (646 | var15) - (484732774 | var15) ^ 587 ^ arg13)) - 652) - arg13 ^ arg13
    var17 = arg14 & arg14
    var18 = var16 + 12 | (var17 + ((-412977070 | var17 | var17) & arg13))
    var19 = (((-1816203677 | var18) | ((410 | (-986465446 ^ arg13 - (736 + arg13) & (var16 + arg14 & (((582 - (var17 & (var17 - arg14))) ^ arg13) | var17) | arg13 + var16) - var18) + var18) ^ var15)) | -401) & var18
    result = var17 - arg14 & ((var16 & 560) + 963 + var17 + ((var15 & var18) ^ var18)) & arg14
    return result
def func7():
    closure = [8]
    def func6(arg10, arg11):
        closure[0] += func8(arg10, arg11)
        return closure[0]
    func = func6
    return func
var12 = func7()
def func3(arg6, arg7):
    def func4(acc, rest):
        var39 = func5(acc, -3)
        if acc == 0:
            return var39
        else:
            result = func4(acc - 1, var39)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        result = 96 | arg3 & 1857531734 | arg3
        return result
    var5 = func2(arg2, arg1)
    var40 = func3(var5, arg1)
    var41 = -2053568073 & 1366759761
    var42 = arg2 | var5 + var5 + var40
    var43 = arg2 ^ (var40 + arg1) ^ 389
    var44 = ((var43 | var40) ^ var41) ^ var43
    if var40 < var43:
        var45 = var43 | arg1 & var42 | var40
    else:
        var45 = -1774586870 & 1215705982
    var46 = -1697199017 & var43 - arg2 - 2027583451
    if arg2 < arg1:
        var47 = -979 & var5 - var40
    else:
        var47 = var43 + -768497796
    var48 = (arg1 & arg1 ^ var44) & var43
    var49 = var43 + var41 + var46
    var50 = var44 | -326 ^ (var42 + var49)
    var51 = arg2 - var49 & var46 | 503253850
    var52 = var51 | (arg2 ^ -556 ^ var51)
    var53 = (var43 ^ var43) | var49
    var54 = var51 + var51
    var55 = (var43 | var46) ^ var40
    var56 = var49 ^ var50 & var46 - var54
    result = var40 ^ var51
    return result
def func5(arg8, arg9):
    var20 = var12(arg8, arg9)
    var21 = func11()
    if var20 < arg9:
        var26 = class12()
    else:
        var26 = class14()
    for var27 in xrange(43):
        var26.func13(var21, arg8)
    var28 = (arg9 & arg8) & var20 & arg9
    var29 = (arg9 & (532880764 + 1742469840)) + var28
    var30 = 2077379284 - var28 & var21
    var31 = var30 + arg9 & var30 + 106
    var32 = (var29 & 1428580048 - var31) | var20
    var33 = ((var29 ^ var31) + var21) + -914
    if var32 < var28:
        var34 = var30 + var28
    else:
        var34 = (var21 + 43 & var28) + var33
    var35 = var31 & var21 ^ -1849676847 & -772660159
    var36 = arg8 & var28
    var37 = (arg8 | var28) - var29
    var38 = var37 + 444 & var30 ^ 1482739836
    result = var30 + (-905 + var32 & arg9) | (arg9 & (((var36 | var31) - (var35 + var30) - 2137653374) & arg9)) ^ -692344362
    return result
class class14(object):
    def func13(self, arg24, arg25):
        result = arg24 | arg25
        return result
class class12(class14):
    def func13(self, arg22, arg23):
        return 0
def func11():
    func9()
    result = len(xrange(36))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 5
def func8(arg13, arg14):
    var15 = -733 - arg13 - arg14 ^ arg14 - 43583763
    var16 = arg14 - var15 ^ (-857 + (arg14 | arg14 + (arg13 | arg13)) | arg13 + (1844057595 ^ -710897396 - arg13 ^ (arg14 ^ arg14 ^ (646 | var15) - (484732774 | var15) ^ 587 ^ arg13)) - 652) - arg13 ^ arg13
    var17 = arg14 & arg14
    var18 = var16 + 12 | (var17 + ((-412977070 | var17 | var17) & arg13))
    var19 = (((-1816203677 | var18) | ((410 | (-986465446 ^ arg13 - (736 + arg13) & (var16 + arg14 & (((582 - (var17 & (var17 - arg14))) ^ arg13) | var17) | arg13 + var16) - var18) + var18) ^ var15)) | -401) & var18
    result = var17 - arg14 & ((var16 & 560) + 963 + var17 + ((var15 & var18) ^ var18)) & arg14
    return result
def func7():
    closure = [8]
    def func6(arg10, arg11):
        closure[0] += func8(arg10, arg11)
        return closure[0]
    func = func6
    return func
var12 = func7()
def func3(arg6, arg7):
    def func4(acc, rest):
        var39 = func5(acc, -3)
        if acc == 0:
            return var39
        else:
            result = func4(acc - 1, var39)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        result = 96 | arg3 & 1857531734 | arg3
        return result
    var5 = func2(arg2, arg1)
    var40 = func3(var5, arg1)
    var41 = -2053568073 & 1366759761
    var42 = arg2 | var5 + var5 + var40
    var43 = arg2 ^ (var40 + arg1) ^ 389
    var44 = ((var43 | var40) ^ var41) ^ var43
    if var40 < var43:
        var45 = var43 | arg1 & var42 | var40
    else:
        var45 = -1774586870 & 1215705982
    var46 = -1697199017 & var43 - arg2 - 2027583451
    if arg2 < arg1:
        var47 = -979 & var5 - var40
    else:
        var47 = var43 + -768497796
    var48 = (arg1 & arg1 ^ var44) & var43
    var49 = var43 + var41 + var46
    var50 = var44 | -326 ^ (var42 + var49)
    var51 = arg2 - var49 & var46 | 503253850
    var52 = var51 | (arg2 ^ -556 ^ var51)
    var53 = (var43 ^ var43) | var49
    var54 = var51 + var51
    var55 = (var43 | var46) ^ var40
    var56 = var49 ^ var50 & var46 - var54
    result = var40 ^ var51
    return result
def func5(arg8, arg9):
    var20 = var12(arg8, arg9)
    var21 = func11()
    if var20 < arg9:
        var26 = class12()
    else:
        var26 = class14()
    for var27 in xrange(43):
        var26.func13(var21, arg8)
    var28 = (arg9 & arg8) & var20 & arg9
    var29 = (arg9 & (532880764 + 1742469840)) + var28
    var30 = 2077379284 - var28 & var21
    var31 = var30 + arg9 & var30 + 106
    var32 = (var29 & 1428580048 - var31) | var20
    var33 = ((var29 ^ var31) + var21) + -914
    if var32 < var28:
        var34 = var30 + var28
    else:
        var34 = (var21 + 43 & var28) + var33
    var35 = var31 & var21 ^ -1849676847 & -772660159
    var36 = arg8 & var28
    var37 = (arg8 | var28) - var29
    var38 = var37 + 444 & var30 ^ 1482739836
    result = var30 + (-905 + var32 & arg9) | (arg9 & (((var36 | var31) - (var35 + var30) - 2137653374) & arg9)) ^ -692344362
    return result
class class14(object):
    def func13(self, arg24, arg25):
        result = arg24 | arg25
        return result
class class12(class14):
    def func13(self, arg22, arg23):
        return 0
def func11():
    func9()
    result = len(xrange(36))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 5
def func8(arg13, arg14):
    var15 = -733 - arg13 - arg14 ^ arg14 - 43583763
    var16 = arg14 - var15 ^ (-857 + (arg14 | arg14 + (arg13 | arg13)) | arg13 + (1844057595 ^ -710897396 - arg13 ^ (arg14 ^ arg14 ^ (646 | var15) - (484732774 | var15) ^ 587 ^ arg13)) - 652) - arg13 ^ arg13
    var17 = arg14 & arg14
    var18 = var16 + 12 | (var17 + ((-412977070 | var17 | var17) & arg13))
    var19 = (((-1816203677 | var18) | ((410 | (-986465446 ^ arg13 - (736 + arg13) & (var16 + arg14 & (((582 - (var17 & (var17 - arg14))) ^ arg13) | var17) | arg13 + var16) - var18) + var18) ^ var15)) | -401) & var18
    result = var17 - arg14 & ((var16 & 560) + 963 + var17 + ((var15 & var18) ^ var18)) & arg14
    return result
def func7():
    closure = [8]
    def func6(arg10, arg11):
        closure[0] += func8(arg10, arg11)
        return closure[0]
    func = func6
    return func
var12 = func7()
def func3(arg6, arg7):
    def func4(acc, rest):
        var39 = func5(acc, -3)
        if acc == 0:
            return var39
        else:
            result = func4(acc - 1, var39)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        result = 96 | arg3 & 1857531734 | arg3
        return result
    var5 = func2(arg2, arg1)
    var40 = func3(var5, arg1)
    var41 = -2053568073 & 1366759761
    var42 = arg2 | var5 + var5 + var40
    var43 = arg2 ^ (var40 + arg1) ^ 389
    var44 = ((var43 | var40) ^ var41) ^ var43
    if var40 < var43:
        var45 = var43 | arg1 & var42 | var40
    else:
        var45 = -1774586870 & 1215705982
    var46 = -1697199017 & var43 - arg2 - 2027583451
    if arg2 < arg1:
        var47 = -979 & var5 - var40
    else:
        var47 = var43 + -768497796
    var48 = (arg1 & arg1 ^ var44) & var43
    var49 = var43 + var41 + var46
    var50 = var44 | -326 ^ (var42 + var49)
    var51 = arg2 - var49 & var46 | 503253850
    var52 = var51 | (arg2 ^ -556 ^ var51)
    var53 = (var43 ^ var43) | var49
    var54 = var51 + var51
    var55 = (var43 | var46) ^ var40
    var56 = var49 ^ var50 & var46 - var54
    result = var40 ^ var51
    return result
def func5(arg8, arg9):
    var20 = var12(arg8, arg9)
    var21 = func11()
    if var20 < arg9:
        var26 = class12()
    else:
        var26 = class14()
    for var27 in xrange(43):
        var26.func13(var21, arg8)
    var28 = (arg9 & arg8) & var20 & arg9
    var29 = (arg9 & (532880764 + 1742469840)) + var28
    var30 = 2077379284 - var28 & var21
    var31 = var30 + arg9 & var30 + 106
    var32 = (var29 & 1428580048 - var31) | var20
    var33 = ((var29 ^ var31) + var21) + -914
    if var32 < var28:
        var34 = var30 + var28
    else:
        var34 = (var21 + 43 & var28) + var33
    var35 = var31 & var21 ^ -1849676847 & -772660159
    var36 = arg8 & var28
    var37 = (arg8 | var28) - var29
    var38 = var37 + 444 & var30 ^ 1482739836
    result = var30 + (-905 + var32 & arg9) | (arg9 & (((var36 | var31) - (var35 + var30) - 2137653374) & arg9)) ^ -692344362
    return result
class class14(object):
    def func13(self, arg24, arg25):
        result = arg24 | arg25
        return result
class class12(class14):
    def func13(self, arg22, arg23):
        return 0
def func11():
    func9()
    result = len(xrange(36))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 5
def func8(arg13, arg14):
    var15 = -733 - arg13 - arg14 ^ arg14 - 43583763
    var16 = arg14 - var15 ^ (-857 + (arg14 | arg14 + (arg13 | arg13)) | arg13 + (1844057595 ^ -710897396 - arg13 ^ (arg14 ^ arg14 ^ (646 | var15) - (484732774 | var15) ^ 587 ^ arg13)) - 652) - arg13 ^ arg13
    var17 = arg14 & arg14
    var18 = var16 + 12 | (var17 + ((-412977070 | var17 | var17) & arg13))
    var19 = (((-1816203677 | var18) | ((410 | (-986465446 ^ arg13 - (736 + arg13) & (var16 + arg14 & (((582 - (var17 & (var17 - arg14))) ^ arg13) | var17) | arg13 + var16) - var18) + var18) ^ var15)) | -401) & var18
    result = var17 - arg14 & ((var16 & 560) + 963 + var17 + ((var15 & var18) ^ var18)) & arg14
    return result
def func7():
    closure = [8]
    def func6(arg10, arg11):
        closure[0] += func8(arg10, arg11)
        return closure[0]
    func = func6
    return func
var12 = func7()
def func3(arg6, arg7):
    def func4(acc, rest):
        var39 = func5(acc, -3)
        if acc == 0:
            return var39
        else:
            result = func4(acc - 1, var39)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        result = 96 | arg3 & 1857531734 | arg3
        return result
    var5 = func2(arg2, arg1)
    var40 = func3(var5, arg1)
    var41 = -2053568073 & 1366759761
    var42 = arg2 | var5 + var5 + var40
    var43 = arg2 ^ (var40 + arg1) ^ 389
    var44 = ((var43 | var40) ^ var41) ^ var43
    if var40 < var43:
        var45 = var43 | arg1 & var42 | var40
    else:
        var45 = -1774586870 & 1215705982
    var46 = -1697199017 & var43 - arg2 - 2027583451
    if arg2 < arg1:
        var47 = -979 & var5 - var40
    else:
        var47 = var43 + -768497796
    var48 = (arg1 & arg1 ^ var44) & var43
    var49 = var43 + var41 + var46
    var50 = var44 | -326 ^ (var42 + var49)
    var51 = arg2 - var49 & var46 | 503253850
    var52 = var51 | (arg2 ^ -556 ^ var51)
    var53 = (var43 ^ var43) | var49
    var54 = var51 + var51
    var55 = (var43 | var46) ^ var40
    var56 = var49 ^ var50 & var46 - var54
    result = var40 ^ var51
    return result
def func5(arg8, arg9):
    var20 = var12(arg8, arg9)
    var21 = func11()
    if var20 < arg9:
        var26 = class12()
    else:
        var26 = class14()
    for var27 in xrange(43):
        var26.func13(var21, arg8)
    var28 = (arg9 & arg8) & var20 & arg9
    var29 = (arg9 & (532880764 + 1742469840)) + var28
    var30 = 2077379284 - var28 & var21
    var31 = var30 + arg9 & var30 + 106
    var32 = (var29 & 1428580048 - var31) | var20
    var33 = ((var29 ^ var31) + var21) + -914
    if var32 < var28:
        var34 = var30 + var28
    else:
        var34 = (var21 + 43 & var28) + var33
    var35 = var31 & var21 ^ -1849676847 & -772660159
    var36 = arg8 & var28
    var37 = (arg8 | var28) - var29
    var38 = var37 + 444 & var30 ^ 1482739836
    result = var30 + (-905 + var32 & arg9) | (arg9 & (((var36 | var31) - (var35 + var30) - 2137653374) & arg9)) ^ -692344362
    return result
class class14(object):
    def func13(self, arg24, arg25):
        result = arg24 | arg25
        return result
class class12(class14):
    def func13(self, arg22, arg23):
        return 0
def func11():
    func9()
    result = len(xrange(36))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 5
def func8(arg13, arg14):
    var15 = -733 - arg13 - arg14 ^ arg14 - 43583763
    var16 = arg14 - var15 ^ (-857 + (arg14 | arg14 + (arg13 | arg13)) | arg13 + (1844057595 ^ -710897396 - arg13 ^ (arg14 ^ arg14 ^ (646 | var15) - (484732774 | var15) ^ 587 ^ arg13)) - 652) - arg13 ^ arg13
    var17 = arg14 & arg14
    var18 = var16 + 12 | (var17 + ((-412977070 | var17 | var17) & arg13))
    var19 = (((-1816203677 | var18) | ((410 | (-986465446 ^ arg13 - (736 + arg13) & (var16 + arg14 & (((582 - (var17 & (var17 - arg14))) ^ arg13) | var17) | arg13 + var16) - var18) + var18) ^ var15)) | -401) & var18
    result = var17 - arg14 & ((var16 & 560) + 963 + var17 + ((var15 & var18) ^ var18)) & arg14
    return result
def func7():
    closure = [8]
    def func6(arg10, arg11):
        closure[0] += func8(arg10, arg11)
        return closure[0]
    func = func6
    return func
var12 = func7()
def func3(arg6, arg7):
    def func4(acc, rest):
        var39 = func5(acc, -3)
        if acc == 0:
            return var39
        else:
            result = func4(acc - 1, var39)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        result = 96 | arg3 & 1857531734 | arg3
        return result
    var5 = func2(arg2, arg1)
    var40 = func3(var5, arg1)
    var41 = -2053568073 & 1366759761
    var42 = arg2 | var5 + var5 + var40
    var43 = arg2 ^ (var40 + arg1) ^ 389
    var44 = ((var43 | var40) ^ var41) ^ var43
    if var40 < var43:
        var45 = var43 | arg1 & var42 | var40
    else:
        var45 = -1774586870 & 1215705982
    var46 = -1697199017 & var43 - arg2 - 2027583451
    if arg2 < arg1:
        var47 = -979 & var5 - var40
    else:
        var47 = var43 + -768497796
    var48 = (arg1 & arg1 ^ var44) & var43
    var49 = var43 + var41 + var46
    var50 = var44 | -326 ^ (var42 + var49)
    var51 = arg2 - var49 & var46 | 503253850
    var52 = var51 | (arg2 ^ -556 ^ var51)
    var53 = (var43 ^ var43) | var49
    var54 = var51 + var51
    var55 = (var43 | var46) ^ var40
    var56 = var49 ^ var50 & var46 - var54
    result = var40 ^ var51
    return result
def func5(arg8, arg9):
    var20 = var12(arg8, arg9)
    var21 = func11()
    if var20 < arg9:
        var26 = class12()
    else:
        var26 = class14()
    for var27 in xrange(43):
        var26.func13(var21, arg8)
    var28 = (arg9 & arg8) & var20 & arg9
    var29 = (arg9 & (532880764 + 1742469840)) + var28
    var30 = 2077379284 - var28 & var21
    var31 = var30 + arg9 & var30 + 106
    var32 = (var29 & 1428580048 - var31) | var20
    var33 = ((var29 ^ var31) + var21) + -914
    if var32 < var28:
        var34 = var30 + var28
    else:
        var34 = (var21 + 43 & var28) + var33
    var35 = var31 & var21 ^ -1849676847 & -772660159
    var36 = arg8 & var28
    var37 = (arg8 | var28) - var29
    var38 = var37 + 444 & var30 ^ 1482739836
    result = var30 + (-905 + var32 & arg9) | (arg9 & (((var36 | var31) - (var35 + var30) - 2137653374) & arg9)) ^ -692344362
    return result
class class14(object):
    def func13(self, arg24, arg25):
        result = arg24 | arg25
        return result
class class12(class14):
    def func13(self, arg22, arg23):
        return 0
def func11():
    func9()
    result = len(xrange(36))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 5
def func8(arg13, arg14):
    var15 = -733 - arg13 - arg14 ^ arg14 - 43583763
    var16 = arg14 - var15 ^ (-857 + (arg14 | arg14 + (arg13 | arg13)) | arg13 + (1844057595 ^ -710897396 - arg13 ^ (arg14 ^ arg14 ^ (646 | var15) - (484732774 | var15) ^ 587 ^ arg13)) - 652) - arg13 ^ arg13
    var17 = arg14 & arg14
    var18 = var16 + 12 | (var17 + ((-412977070 | var17 | var17) & arg13))
    var19 = (((-1816203677 | var18) | ((410 | (-986465446 ^ arg13 - (736 + arg13) & (var16 + arg14 & (((582 - (var17 & (var17 - arg14))) ^ arg13) | var17) | arg13 + var16) - var18) + var18) ^ var15)) | -401) & var18
    result = var17 - arg14 & ((var16 & 560) + 963 + var17 + ((var15 & var18) ^ var18)) & arg14
    return result
def func7():
    closure = [8]
    def func6(arg10, arg11):
        closure[0] += func8(arg10, arg11)
        return closure[0]
    func = func6
    return func
var12 = func7()
def func3(arg6, arg7):
    def func4(acc, rest):
        var39 = func5(acc, -3)
        if acc == 0:
            return var39
        else:
            result = func4(acc - 1, var39)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        result = 96 | arg3 & 1857531734 | arg3
        return result
    var5 = func2(arg2, arg1)
    var40 = func3(var5, arg1)
    var41 = -2053568073 & 1366759761
    var42 = arg2 | var5 + var5 + var40
    var43 = arg2 ^ (var40 + arg1) ^ 389
    var44 = ((var43 | var40) ^ var41) ^ var43
    if var40 < var43:
        var45 = var43 | arg1 & var42 | var40
    else:
        var45 = -1774586870 & 1215705982
    var46 = -1697199017 & var43 - arg2 - 2027583451
    if arg2 < arg1:
        var47 = -979 & var5 - var40
    else:
        var47 = var43 + -768497796
    var48 = (arg1 & arg1 ^ var44) & var43
    var49 = var43 + var41 + var46
    var50 = var44 | -326 ^ (var42 + var49)
    var51 = arg2 - var49 & var46 | 503253850
    var52 = var51 | (arg2 ^ -556 ^ var51)
    var53 = (var43 ^ var43) | var49
    var54 = var51 + var51
    var55 = (var43 | var46) ^ var40
    var56 = var49 ^ var50 & var46 - var54
    result = var40 ^ var51
    return result
def func5(arg8, arg9):
    var20 = var12(arg8, arg9)
    var21 = func11()
    if var20 < arg9:
        var26 = class12()
    else:
        var26 = class14()
    for var27 in xrange(43):
        var26.func13(var21, arg8)
    var28 = (arg9 & arg8) & var20 & arg9
    var29 = (arg9 & (532880764 + 1742469840)) + var28
    var30 = 2077379284 - var28 & var21
    var31 = var30 + arg9 & var30 + 106
    var32 = (var29 & 1428580048 - var31) | var20
    var33 = ((var29 ^ var31) + var21) + -914
    if var32 < var28:
        var34 = var30 + var28
    else:
        var34 = (var21 + 43 & var28) + var33
    var35 = var31 & var21 ^ -1849676847 & -772660159
    var36 = arg8 & var28
    var37 = (arg8 | var28) - var29
    var38 = var37 + 444 & var30 ^ 1482739836
    result = var30 + (-905 + var32 & arg9) | (arg9 & (((var36 | var31) - (var35 + var30) - 2137653374) & arg9)) ^ -692344362
    return result
class class14(object):
    def func13(self, arg24, arg25):
        result = arg24 | arg25
        return result
class class12(class14):
    def func13(self, arg22, arg23):
        return 0
def func11():
    func9()
    result = len(xrange(36))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 5
def func8(arg13, arg14):
    var15 = -733 - arg13 - arg14 ^ arg14 - 43583763
    var16 = arg14 - var15 ^ (-857 + (arg14 | arg14 + (arg13 | arg13)) | arg13 + (1844057595 ^ -710897396 - arg13 ^ (arg14 ^ arg14 ^ (646 | var15) - (484732774 | var15) ^ 587 ^ arg13)) - 652) - arg13 ^ arg13
    var17 = arg14 & arg14
    var18 = var16 + 12 | (var17 + ((-412977070 | var17 | var17) & arg13))
    var19 = (((-1816203677 | var18) | ((410 | (-986465446 ^ arg13 - (736 + arg13) & (var16 + arg14 & (((582 - (var17 & (var17 - arg14))) ^ arg13) | var17) | arg13 + var16) - var18) + var18) ^ var15)) | -401) & var18
    result = var17 - arg14 & ((var16 & 560) + 963 + var17 + ((var15 & var18) ^ var18)) & arg14
    return result
def func7():
    closure = [8]
    def func6(arg10, arg11):
        closure[0] += func8(arg10, arg11)
        return closure[0]
    func = func6
    return func
var12 = func7()
def func3(arg6, arg7):
    def func4(acc, rest):
        var39 = func5(acc, -3)
        if acc == 0:
            return var39
        else:
            result = func4(acc - 1, var39)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        result = 96 | arg3 & 1857531734 | arg3
        return result
    var5 = func2(arg2, arg1)
    var40 = func3(var5, arg1)
    var41 = -2053568073 & 1366759761
    var42 = arg2 | var5 + var5 + var40
    var43 = arg2 ^ (var40 + arg1) ^ 389
    var44 = ((var43 | var40) ^ var41) ^ var43
    if var40 < var43:
        var45 = var43 | arg1 & var42 | var40
    else:
        var45 = -1774586870 & 1215705982
    var46 = -1697199017 & var43 - arg2 - 2027583451
    if arg2 < arg1:
        var47 = -979 & var5 - var40
    else:
        var47 = var43 + -768497796
    var48 = (arg1 & arg1 ^ var44) & var43
    var49 = var43 + var41 + var46
    var50 = var44 | -326 ^ (var42 + var49)
    var51 = arg2 - var49 & var46 | 503253850
    var52 = var51 | (arg2 ^ -556 ^ var51)
    var53 = (var43 ^ var43) | var49
    var54 = var51 + var51
    var55 = (var43 | var46) ^ var40
    var56 = var49 ^ var50 & var46 - var54
    result = var40 ^ var51
    return result
def func5(arg8, arg9):
    var20 = var12(arg8, arg9)
    var21 = func11()
    if var20 < arg9:
        var26 = class12()
    else:
        var26 = class14()
    for var27 in xrange(43):
        var26.func13(var21, arg8)
    var28 = (arg9 & arg8) & var20 & arg9
    var29 = (arg9 & (532880764 + 1742469840)) + var28
    var30 = 2077379284 - var28 & var21
    var31 = var30 + arg9 & var30 + 106
    var32 = (var29 & 1428580048 - var31) | var20
    var33 = ((var29 ^ var31) + var21) + -914
    if var32 < var28:
        var34 = var30 + var28
    else:
        var34 = (var21 + 43 & var28) + var33
    var35 = var31 & var21 ^ -1849676847 & -772660159
    var36 = arg8 & var28
    var37 = (arg8 | var28) - var29
    var38 = var37 + 444 & var30 ^ 1482739836
    result = var30 + (-905 + var32 & arg9) | (arg9 & (((var36 | var31) - (var35 + var30) - 2137653374) & arg9)) ^ -692344362
    return result
class class14(object):
    def func13(self, arg24, arg25):
        result = arg24 | arg25
        return result
class class12(class14):
    def func13(self, arg22, arg23):
        return 0
def func11():
    func9()
    result = len(xrange(36))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 5
def func8(arg13, arg14):
    var15 = -733 - arg13 - arg14 ^ arg14 - 43583763
    var16 = arg14 - var15 ^ (-857 + (arg14 | arg14 + (arg13 | arg13)) | arg13 + (1844057595 ^ -710897396 - arg13 ^ (arg14 ^ arg14 ^ (646 | var15) - (484732774 | var15) ^ 587 ^ arg13)) - 652) - arg13 ^ arg13
    var17 = arg14 & arg14
    var18 = var16 + 12 | (var17 + ((-412977070 | var17 | var17) & arg13))
    var19 = (((-1816203677 | var18) | ((410 | (-986465446 ^ arg13 - (736 + arg13) & (var16 + arg14 & (((582 - (var17 & (var17 - arg14))) ^ arg13) | var17) | arg13 + var16) - var18) + var18) ^ var15)) | -401) & var18
    result = var17 - arg14 & ((var16 & 560) + 963 + var17 + ((var15 & var18) ^ var18)) & arg14
    return result
def func7():
    closure = [8]
    def func6(arg10, arg11):
        closure[0] += func8(arg10, arg11)
        return closure[0]
    func = func6
    return func
var12 = func7()
def func3(arg6, arg7):
    def func4(acc, rest):
        var39 = func5(acc, -3)
        if acc == 0:
            return var39
        else:
            result = func4(acc - 1, var39)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        result = 96 | arg3 & 1857531734 | arg3
        return result
    var5 = func2(arg2, arg1)
    var40 = func3(var5, arg1)
    var41 = -2053568073 & 1366759761
    var42 = arg2 | var5 + var5 + var40
    var43 = arg2 ^ (var40 + arg1) ^ 389
    var44 = ((var43 | var40) ^ var41) ^ var43
    if var40 < var43:
        var45 = var43 | arg1 & var42 | var40
    else:
        var45 = -1774586870 & 1215705982
    var46 = -1697199017 & var43 - arg2 - 2027583451
    if arg2 < arg1:
        var47 = -979 & var5 - var40
    else:
        var47 = var43 + -768497796
    var48 = (arg1 & arg1 ^ var44) & var43
    var49 = var43 + var41 + var46
    var50 = var44 | -326 ^ (var42 + var49)
    var51 = arg2 - var49 & var46 | 503253850
    var52 = var51 | (arg2 ^ -556 ^ var51)
    var53 = (var43 ^ var43) | var49
    var54 = var51 + var51
    var55 = (var43 | var46) ^ var40
    var56 = var49 ^ var50 & var46 - var54
    result = var40 ^ var51
    return result
def func5(arg8, arg9):
    var20 = var12(arg8, arg9)
    var21 = func11()
    if var20 < arg9:
        var26 = class12()
    else:
        var26 = class14()
    for var27 in xrange(43):
        var26.func13(var21, arg8)
    var28 = (arg9 & arg8) & var20 & arg9
    var29 = (arg9 & (532880764 + 1742469840)) + var28
    var30 = 2077379284 - var28 & var21
    var31 = var30 + arg9 & var30 + 106
    var32 = (var29 & 1428580048 - var31) | var20
    var33 = ((var29 ^ var31) + var21) + -914
    if var32 < var28:
        var34 = var30 + var28
    else:
        var34 = (var21 + 43 & var28) + var33
    var35 = var31 & var21 ^ -1849676847 & -772660159
    var36 = arg8 & var28
    var37 = (arg8 | var28) - var29
    var38 = var37 + 444 & var30 ^ 1482739836
    result = var30 + (-905 + var32 & arg9) | (arg9 & (((var36 | var31) - (var35 + var30) - 2137653374) & arg9)) ^ -692344362
    return result
class class14(object):
    def func13(self, arg24, arg25):
        result = arg24 | arg25
        return result
class class12(class14):
    def func13(self, arg22, arg23):
        return 0
def func11():
    func9()
    result = len(xrange(36))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 5
def func8(arg13, arg14):
    var15 = -733 - arg13 - arg14 ^ arg14 - 43583763
    var16 = arg14 - var15 ^ (-857 + (arg14 | arg14 + (arg13 | arg13)) | arg13 + (1844057595 ^ -710897396 - arg13 ^ (arg14 ^ arg14 ^ (646 | var15) - (484732774 | var15) ^ 587 ^ arg13)) - 652) - arg13 ^ arg13
    var17 = arg14 & arg14
    var18 = var16 + 12 | (var17 + ((-412977070 | var17 | var17) & arg13))
    var19 = (((-1816203677 | var18) | ((410 | (-986465446 ^ arg13 - (736 + arg13) & (var16 + arg14 & (((582 - (var17 & (var17 - arg14))) ^ arg13) | var17) | arg13 + var16) - var18) + var18) ^ var15)) | -401) & var18
    result = var17 - arg14 & ((var16 & 560) + 963 + var17 + ((var15 & var18) ^ var18)) & arg14
    return result
def func7():
    closure = [8]
    def func6(arg10, arg11):
        closure[0] += func8(arg10, arg11)
        return closure[0]
    func = func6
    return func
var12 = func7()
def func3(arg6, arg7):
    def func4(acc, rest):
        var39 = func5(acc, -3)
        if acc == 0:
            return var39
        else:
            result = func4(acc - 1, var39)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
